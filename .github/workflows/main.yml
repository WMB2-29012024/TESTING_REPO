name: Get Branch Name, Commit Hash, Commits, and Changes

on:
  push:
    branches:
      - '*'

jobs:
  get-branch-name-commit-hash-commits-and-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Log start of script
        run: echo "GitHub Actions script is starting..."

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get branch name
        id: branch
        run: echo "::set-output name=branch_name::$(echo $GITHUB_REF | cut -d/ -f3-)"

      - name: Get latest commit hash
        id: commit
        run: echo "::set-output name=commit_hash::$(git log -1 --pretty=format:'%h')"

            - name: Make API call and Log branch name, commit hash, and GitHub ref
        run: |
          # Constructing the JSON payload using string interpolation
          json_payload=$(echo "{
            \"query\": \"mutation Mutation($input: SaveUserGithubDataInputType) {\\n  saveUserGithubData(input: $input) {    response {      status      message    }    data {      commitHash      branchRef      branchName    }  }}\\n\",
            \"variables\": {
              \"input\": {
                \"commitHash\": \"${{ steps.commit.outputs.commit_hash }}\",
                \"branchRef\": \"$GITHUB_REF\",
                \"branchName\": \"${{ steps.branch.outputs.branch_name }}\"
              }
            }
          }")
          api_url="https://webmaster-portal-dev.onrender.com/graphql"

          echo "$json_payload"
          echo "$api_url"

          # Making the API call using curl with the constructed payload
          response=$(curl --location "$api_url" \
          --header 'Content-Type: application/json' \
          --data "$json_payload")

          # Logging the API response and branch details
          echo "API Response: $response"
          echo "Branch Name: ${{ steps.branch.outputs.branch_name }}, Commit Hash: ${{ steps.commit.outputs.commit_hash }}, GitHub Ref: $GITHUB_REF"
