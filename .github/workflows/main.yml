name: Get Branch Name, Commit Hash, Commits, and Changes

on:
  push:
    branches:
      - '*'

jobs:
  get-branch-name-commit-hash-commits-and-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Log start of script
        run: echo "GitHub Actions script is starting..."

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get branch name
        id: branch
        run: echo "::set-output name=branch_name::$(echo $GITHUB_REF | cut -d/ -f3-)"

      - name: Get latest commit hash
        id: commit
        run: echo "::set-output name=commit_hash::$(git log -1 --pretty=format:'%h')"

      - name: Make API call and Log branch name, commit hash, and GitHub ref
        run: |
          # Constructing the JSON payload for the API call
          json_payload="{\"query\":\"mutation Mutation(\$input: SaveUserGithubDataInputType) { saveUserGithubData(input: \$input) { response { status message } data { commitHash branchRef branchName } } }\",\"variables\":{\"input\":{\"commitHash\":\"${{ steps.commit.outputs.commit_hash }}\",\"branchRef\":\"${{ github.sha }}\",\"branchName\":\"${{ steps.branch.outputs.branch_name }}\"}}"
          
          # Making the API call using curl
          response=$(curl --location 'https://webmaster-portal-dev.onrender.com/graphql' \
          --header 'Content-Type: application/json' \
          --data '{"query":"mutation Mutation($input: SaveUserGithubDataInputType) {\n  saveUserGithubData(input: $input) {\n    response {\n      status\n      message\n    }\n    data {\n      commitHash\n      branchRef\n      branchName\n    }\n  }\n}","variables":{"input":{"commitHash":"new commit","branchRef":"new branchref","branchName":"new branch"}}}')
          
          # Logging the API response and branch details
          echo "API Response: $response"
          echo "Branch Name: ${{ steps.branch.outputs.branch_name }}, Commit Hash: ${{ steps.commit.outputs.commit_hash }}, GitHub Ref: $GITHUB_REF"
